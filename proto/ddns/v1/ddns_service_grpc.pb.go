// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/ddns/v1/ddns_service.proto

package ddns_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DDNSServiceV1Client is the client API for DDNSServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DDNSServiceV1Client interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error)
	FindNode(ctx context.Context, in *FindNodeRequest, opts ...grpc.CallOption) (*FindNodeResponse, error)
	FindValue(ctx context.Context, in *FindValueRequest, opts ...grpc.CallOption) (*FindValueResponse, error)
}

type dDNSServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewDDNSServiceV1Client(cc grpc.ClientConnInterface) DDNSServiceV1Client {
	return &dDNSServiceV1Client{cc}
}

func (c *dDNSServiceV1Client) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/ddns.DDNSServiceV1/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDNSServiceV1Client) Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, "/ddns.DDNSServiceV1/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDNSServiceV1Client) FindNode(ctx context.Context, in *FindNodeRequest, opts ...grpc.CallOption) (*FindNodeResponse, error) {
	out := new(FindNodeResponse)
	err := c.cc.Invoke(ctx, "/ddns.DDNSServiceV1/FindNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDNSServiceV1Client) FindValue(ctx context.Context, in *FindValueRequest, opts ...grpc.CallOption) (*FindValueResponse, error) {
	out := new(FindValueResponse)
	err := c.cc.Invoke(ctx, "/ddns.DDNSServiceV1/FindValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DDNSServiceV1Server is the server API for DDNSServiceV1 service.
// All implementations must embed UnimplementedDDNSServiceV1Server
// for forward compatibility
type DDNSServiceV1Server interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Store(context.Context, *StoreRequest) (*StoreResponse, error)
	FindNode(context.Context, *FindNodeRequest) (*FindNodeResponse, error)
	FindValue(context.Context, *FindValueRequest) (*FindValueResponse, error)
	mustEmbedUnimplementedDDNSServiceV1Server()
}

// UnimplementedDDNSServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedDDNSServiceV1Server struct {
}

func (UnimplementedDDNSServiceV1Server) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDDNSServiceV1Server) Store(context.Context, *StoreRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedDDNSServiceV1Server) FindNode(context.Context, *FindNodeRequest) (*FindNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNode not implemented")
}
func (UnimplementedDDNSServiceV1Server) FindValue(context.Context, *FindValueRequest) (*FindValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindValue not implemented")
}
func (UnimplementedDDNSServiceV1Server) mustEmbedUnimplementedDDNSServiceV1Server() {}

// UnsafeDDNSServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DDNSServiceV1Server will
// result in compilation errors.
type UnsafeDDNSServiceV1Server interface {
	mustEmbedUnimplementedDDNSServiceV1Server()
}

func RegisterDDNSServiceV1Server(s grpc.ServiceRegistrar, srv DDNSServiceV1Server) {
	s.RegisterService(&DDNSServiceV1_ServiceDesc, srv)
}

func _DDNSServiceV1_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDNSServiceV1Server).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddns.DDNSServiceV1/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDNSServiceV1Server).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDNSServiceV1_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDNSServiceV1Server).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddns.DDNSServiceV1/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDNSServiceV1Server).Store(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDNSServiceV1_FindNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDNSServiceV1Server).FindNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddns.DDNSServiceV1/FindNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDNSServiceV1Server).FindNode(ctx, req.(*FindNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDNSServiceV1_FindValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDNSServiceV1Server).FindValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddns.DDNSServiceV1/FindValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDNSServiceV1Server).FindValue(ctx, req.(*FindValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DDNSServiceV1_ServiceDesc is the grpc.ServiceDesc for DDNSServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DDNSServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ddns.DDNSServiceV1",
	HandlerType: (*DDNSServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _DDNSServiceV1_Ping_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _DDNSServiceV1_Store_Handler,
		},
		{
			MethodName: "FindNode",
			Handler:    _DDNSServiceV1_FindNode_Handler,
		},
		{
			MethodName: "FindValue",
			Handler:    _DDNSServiceV1_FindValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ddns/v1/ddns_service.proto",
}
