// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/structx/ddns/internal/core/domain"
)

// DDNS is an autogenerated mock type for the DDNS type
type DDNS struct {
	mock.Mock
}

type DDNS_Expecter struct {
	mock *mock.Mock
}

func (_m *DDNS) EXPECT() *DDNS_Expecter {
	return &DDNS_Expecter{mock: &_m.Mock}
}

// AddOrUpdateRecord provides a mock function with given fields: ctx, r
func (_m *DDNS) AddOrUpdateRecord(ctx context.Context, r domain.Record) (*domain.Echo, error) {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for AddOrUpdateRecord")
	}

	var r0 *domain.Echo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Record) (*domain.Echo, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Record) *domain.Echo); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Echo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Record) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DDNS_AddOrUpdateRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrUpdateRecord'
type DDNS_AddOrUpdateRecord_Call struct {
	*mock.Call
}

// AddOrUpdateRecord is a helper method to define mock.On call
//   - ctx context.Context
//   - r domain.Record
func (_e *DDNS_Expecter) AddOrUpdateRecord(ctx interface{}, r interface{}) *DDNS_AddOrUpdateRecord_Call {
	return &DDNS_AddOrUpdateRecord_Call{Call: _e.mock.On("AddOrUpdateRecord", ctx, r)}
}

func (_c *DDNS_AddOrUpdateRecord_Call) Run(run func(ctx context.Context, r domain.Record)) *DDNS_AddOrUpdateRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Record))
	})
	return _c
}

func (_c *DDNS_AddOrUpdateRecord_Call) Return(_a0 *domain.Echo, _a1 error) *DDNS_AddOrUpdateRecord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DDNS_AddOrUpdateRecord_Call) RunAndReturn(run func(context.Context, domain.Record) (*domain.Echo, error)) *DDNS_AddOrUpdateRecord_Call {
	_c.Call.Return(run)
	return _c
}

// Echo provides a mock function with given fields: ctx
func (_m *DDNS) Echo(ctx context.Context) *domain.Echo {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Echo")
	}

	var r0 *domain.Echo
	if rf, ok := ret.Get(0).(func(context.Context) *domain.Echo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Echo)
		}
	}

	return r0
}

// DDNS_Echo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Echo'
type DDNS_Echo_Call struct {
	*mock.Call
}

// Echo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DDNS_Expecter) Echo(ctx interface{}) *DDNS_Echo_Call {
	return &DDNS_Echo_Call{Call: _e.mock.On("Echo", ctx)}
}

func (_c *DDNS_Echo_Call) Run(run func(ctx context.Context)) *DDNS_Echo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DDNS_Echo_Call) Return(_a0 *domain.Echo) *DDNS_Echo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DDNS_Echo_Call) RunAndReturn(run func(context.Context) *domain.Echo) *DDNS_Echo_Call {
	_c.Call.Return(run)
	return _c
}

// NodeLookup provides a mock function with given fields: ctx, nodeID
func (_m *DDNS) NodeLookup(ctx context.Context, nodeID []byte) ([]*domain.Contact, error) {
	ret := _m.Called(ctx, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for NodeLookup")
	}

	var r0 []*domain.Contact
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) ([]*domain.Contact, error)); ok {
		return rf(ctx, nodeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) []*domain.Contact); ok {
		r0 = rf(ctx, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Contact)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, nodeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DDNS_NodeLookup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeLookup'
type DDNS_NodeLookup_Call struct {
	*mock.Call
}

// NodeLookup is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeID []byte
func (_e *DDNS_Expecter) NodeLookup(ctx interface{}, nodeID interface{}) *DDNS_NodeLookup_Call {
	return &DDNS_NodeLookup_Call{Call: _e.mock.On("NodeLookup", ctx, nodeID)}
}

func (_c *DDNS_NodeLookup_Call) Run(run func(ctx context.Context, nodeID []byte)) *DDNS_NodeLookup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *DDNS_NodeLookup_Call) Return(_a0 []*domain.Contact, _a1 error) *DDNS_NodeLookup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DDNS_NodeLookup_Call) RunAndReturn(run func(context.Context, []byte) ([]*domain.Contact, error)) *DDNS_NodeLookup_Call {
	_c.Call.Return(run)
	return _c
}

// NewDDNS creates a new instance of DDNS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDDNS(t interface {
	mock.TestingT
	Cleanup(func())
}) *DDNS {
	mock := &DDNS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
